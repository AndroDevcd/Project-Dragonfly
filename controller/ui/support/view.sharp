mod ui.support;

class view {
    private view() {}

    public view(id : var) {
        self->id = id;
    }

    x : var;
    y : var;

    width : var;
    height : var;
    margins : margin;
    visibility : var;
    id : var;
    left_of : var;
    top_of : var;
    bottom_of : var;
    right_of : var;
    gravity : var;
    transformed : var;
    protected container : window;
    protected owner : fragment;

    def on_destroy();

    def set_width(size: var) : view {
        width = size;
        transformed = false;
        return self;
    }

    def transform_height(): var;
    def transform_width(): var;

    protected def invalidate() {
        if(transformed) return;
        x = 0;
        y = 0;

        v : view;
        if(left_of > constants.resource.id.parent) {
            v = owner.find_view_by_id(left_of);
            v.invalidate();
            x = v.x;
        }

        if(top_of > constants.resource.id.parent) {
            if(left_of > constants.resource.id.parent && top_of != left_of) {
                throw new ill_state_except("cannot align view to top of another view to whom we are not left aligned to");
            }

            if(v == null)
               v = owner.find_view_by_id(top_of);
            v.invalidate();
            y = v.y - transform_height();

            if(v.margins != null) {
                y -= v.margins.top;
            }
        }

        if(bottom_of > constants.resource.id.parent) {
            if(top_of >= constants.resource.id.parent)
                throw new ill_state_except("cannot align view to bottom while also having top alignment");

            if(v == null || (v != null && v.id != bottom_of))
               v = owner.find_view_by_id(top_of);
            v.invalidate();
            y = v.y + transform_height();

            if(v.margins != null) {
                y += v.margins.bottom;
            }
        }

        if(right_of > constants.resource.id.parent) {
            if(left_of >= constants.resource.id.parent)
                throw new ill_state_except("cannot align view to right while also having left alignment");

            if(v == null || (v != null && v.id != right_of))
               v = owner.find_view_by_id(top_of);
            v.invalidate();
            x = v.transform_width() + 1;

            if(v.margins != null) {
                x += v.margins.right;
            }
        }

        if(gravity == constants.view.GRAVITY_RIGHT) {
            if(width == constants.view.MATCH_PARENT) {
                x = constants.window.WIDTH - (v.transform_width() - 1);

                if(margins != null) {
                    x -= margins.right;
                }
            } else if(width >= 0) {
                max := x + width;
                x = max - (v.transform_width() - 1);
            }

        } else if(gravity == constants.view.GRAVITY_CENTER) {

            if(width == constants.view.MATCH_PARENT) {
                max_real_estate := constants.window.WIDTH - x;
                leftover_space := max_real_estate - v.transform_width();

                if(leftover_space > 0) {
                    x += (leftover_space / 2) as _int8;
                }

                if(margins != null) {
                    x -= margins.right;
                }
            } else if(width >= 0) {
                max_real_estate := (x + width) - x;
                leftover_space := max_real_estate - v.transform_width();

                if(leftover_space > 0) {
                    x += (leftover_space / 2) as _int8;
                }
            }
        }

        if(margins != null) {
            x += margins.left;
            y += margins.top;
            x -= margins.right;
        }

        if(y < 0 || x < 0 || y > constants.window.HEIGHT || x > constants.window.WIDTH)
           visibility = constants.view.INVISIBLE;
        else
           visibility = constants.view.VISIBLE;
        transformed = true;
    }

    def draw();

    def set_height(size: var) : view {
        width = size;
        transformed = false;
        return self;
    }

    def set_visibility(visible: var) : view {
        visibility = visible;
        transformed = false;
        return self;
    }

    def to_left_of(id: var) : view {
        left_of = id;
        transformed = false;
        return self;
    }

    def to_right_of(id: var) : view {
        right_of = id;
        transformed = false;
        return self;
    }

    def to_top_of(id: var) : view {
        top_of = id;
        transformed = false;
        return self;
    }

    def to_bottom_of(id: var) : view {
        bottom_of = id;
        transformed = false;
        return self;
    }

    def set_gravity(grav: var) : view {
        gravity = grav;
        transformed = false;
        return self;
    }

    def set_margin_left(size: var) : view {
        if(margins == null)
           margins = new margin();
        margins.left = size;
        transformed = false;
        return self;
    }

    def set_margin_right(size: var) : view {
        if(margins == null)
           margins = new margin();
        margins.right = size;
        transformed = false;
        return self;
    }

    def set_margin_top(size: var) : view {
        if(margins == null)
           margins = new margin();
        margins.top = size;
        transformed = false;
        return self;
    }

    def set_margin_bottom(size: var) : view {
        if(margins == null)
           margins = new margin();
        margins.bottom = size;
        transformed = false;
        return self;
    }
}
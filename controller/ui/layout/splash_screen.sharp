mod ui.layout;

import ui.res;
import ui.support;
import std.io;
import std.io.task;
import main;
import common.network;

class splash_screen base fragment {

    splash_screen(container : window, id: var) -> base(container, id) { }

    def configure() {
        add_view(new image_view(constants.resource.id.product_icon)
            .set_drawable(constants.resource.id.ico_product)
            .set_width(constants.view.WRAP_CONTENT)
            .set_height(constants.view.WRAP_CONTENT)
            .to_start_of(constants.resource.id.parent)
            .to_top_of(constants.resource.id.parent)
            .set_margin_left(10)
            .set_margin_top(20)
        );
        add_view(new text_view(constants.resource.id.product_name_1)
            .set_width(constants.view.WRAP_CONTENT)
            .set_height(constants.view.WRAP_CONTENT)
            .to_end_of(constants.resource.id.parent)
            .to_top_of(constants.resource.id.parent)
            .set_margin_right(4)
            .set_margin_top(10)
        );
        add_view(new text_view(constants.resource.id.product_name_2)
            .set_width(constants.view.WRAP_CONTENT)
            .set_height(constants.view.WRAP_CONTENT)
            .below(constants.resource.id.product_name_1)
            .to_start_of(constants.resource.id.product_name_1)
            .set_margin_right(4)
            .set_margin_top(2)
        );
    }

    def on_create() {
        base->on_create();

        product_name_1 := find_view_by_id(constants.resource.id.time) as text_view;
        product_name_2 := find_view_by_id(constants.resource.id.time) as text_view;

        product_name_1.test_size = 2;
        product_name_2.test_size = 2;

        product_name_1.text = "Project";
        product_name_2.text = "Dragonfly";

        task.builder()
          .schedule(2000)
          .with_args(new object[] { self })
            = { args: object[]  ->
               frag := args[1] as fragment;
               frag.navigate(constants.layout.HOME, true);
            };
    }

    def on_destroy() {
       base->on_destroy();
    }
}

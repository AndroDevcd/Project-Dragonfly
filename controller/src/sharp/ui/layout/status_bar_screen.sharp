mod ui.layout;

import (
    ui.res,
    ui.support,
    std.io,
    std.io.fiber,
    std.io.coroutines,
    main,
    common.network
);

class status_bar_screen base fragment {

    status_bar_screen(container : window, id: var) -> base(container, id) { }

    static const SIGNAL_UPDATER_TASK : string = "signal-updater";
    static const CLOCK_TASK : string = "clock-updater";
    static const FLIGHT_DATA_TASK : string = "flight-data-updater";

    signal_update_job: job;
    clock_job: job;
    flight_data_job: job;

    override def configure() {
        add_view(new image_view(constants.resource.id.mode)
            .set_drawable(constants.resource.id.ico_normal_mode)
            .set_width(constants.view.WRAP_CONTENT)
            .set_height(constants.view.WRAP_CONTENT)
            .to_start_of(constants.resource.id.parent)
            .to_right_of(constants.resource.id.parent)
            .set_margin_right(4)
            .set_margin_top(2)
        );
        add_view(new image_view(constants.resource.id.signal_strength)
            .set_width(constants.view.WRAP_CONTENT)
            .set_height(constants.view.WRAP_CONTENT)
            .to_left_of(constants.resource.id.mode)
            .to_top_of(constants.resource.id.parent)
            .set_margin_right(4)
            .set_margin_top(1)
        );
        add_view(new text_view(constants.resource.id.time)
            .set_width(constants.view.MATCH_PARENT)
            .set_height(constants.view.WRAP_CONTENT)
            .to_start_of(constants.resource.id.parent)
            .set_gravity(constants.view.GRAVITY_CENTER)
            .set_margin_top(5)
        );
        add_view(new image_view(constants.resource.id.battery_status)
            .set_drawable(constants.resource.id.ico_battery_4)
            .set_width(constants.view.WRAP_CONTENT)
            .set_height(constants.view.WRAP_CONTENT)
            .to_start_of(constants.resource.id.parent)
            .set_margin_top(2)
            .set_margin_left(4)
        );
    }

    def on_create() {
        base->on_create();

        tm := find_view_by_id(constants.resource.id.time) as text_view;
        sig_view := find_view_by_id(constants.resource.id.signal_strength) as image_view;
        bat_view := find_view_by_id(constants.resource.id.battery_status) as image_view;

        flight_data_job = coroutine.builder()
          .with_host(tman.main)
          .with_name(FLIGHT_DATA_TASK)
          .with_args(new object[] { self, bat_view })
            = { args: object[]  ->
               screen := args[1] as status_bar_screen;
               battery := args[2] as image_view;

               for(;;) {
                   if(!disconnected) {
                       data := network.get_flight_data();

                       if(data != null) {
                          screen.on_flight_data_received(data!!.altitude, data!!.speed);

                          when (data!!.bat_lvl) {
                            0 -> {
                               battery.set_drawable(constants.resource.id.ico_battery_0);
                            }
                            1 -> {
                               battery.set_drawable(constants.resource.id.ico_battery_1);
                            }
                            2 -> {
                               battery.set_drawable(constants.resource.id.ico_battery_2);
                            }
                            3 -> {
                               battery.set_drawable(constants.resource.id.ico_battery_3);
                            }
                            4 -> {
                               battery.set_drawable(constants.resource.id.ico_battery_4);
                            }
                            else -> {
                               battery.set_drawable(constants.resource.id.ico_battery_0);
                            }
                          }
                       }
                   }

                   delay(250);
               }
            };

        signal_update_job = coroutine.builder()
          .with_host(tman.main)
          .with_name(SIGNAL_UPDATER_TASK)
          .with_args(new object[] { sig_view })
            = { args : object[] ->
             iv := args[1] as image_view;

             for(;;) {
                 when (signal_strength) {
                    0 -> {
                       iv.set_drawable(constants.resource.id.ico_signal_0);
                    }
                    1 -> {
                       iv.set_drawable(constants.resource.id.ico_signal_1);
                    }
                    2 -> {
                       iv.set_drawable(constants.resource.id.ico_signal_2);
                    }
                    3 -> {
                       iv.set_drawable(constants.resource.id.ico_signal_3);
                    }
                    4 -> {
                       iv.set_drawable(constants.resource.id.ico_signal_4);
                    }
                    else -> {
                       iv.set_drawable(constants.resource.id.ico_signal_4);
                    }
                 }

                 delay(1000);
             }
            };


        clock_job = coroutine.builder()
          .with_host(tman.main)
          .with_name(CLOCK_TASK)
          .with_args(new object[] { tm })
            = { args : object[] ->
             tv := args[1] as text_view;

             for(;;) {
                 min_tm : _int64 = ((time.mills_time() / 1000) / 60).value;
                 days_passed : _int32 = min_tm / constants.time.MIN_IN_DAY;
                 min_passed : _int32 = days_passed * constants.time.MIN_IN_DAY;
                 min_passed_today : _int32 = min_tm - min_passed;
                 utc_hr : _int32 = min_passed_today / constants.time.MIN_IN_HR;
                 utc_min : _int32 = min_passed_today - (utc_hr * constants.time.MIN_IN_HR);

                 hr := 0;
                 tod := "am";
                 if(utc_hr == 5) {
                    hr = 12;
                 } else if(utc_hr > 5) {
                    hr = utc_hr - 5;
                 } else {
                    hr = 12 + (utc_hr - 5);
                 }

                 if(hr >= 12) {
                   if(utc_hr != 5)
                      tod = "pm";

                   if(hr > 12)
                      hr -= 12;
                 }

                 real_time : string = "${hr}:";

                 if(utc_min < 10)
                   real_time += "0";
                 real_time += utc_min;
                 real_time += tod;
                 tv.text = real_time;
                 delay(1000);
             }
        };
    }

    def on_flight_data_received(altitude: var, speed: var);

    override def on_destroy() {
       signal_update_job.cancel();
       clock_job.cancel();
       flight_data_job.cancel();
       base->on_destroy();
    }
}

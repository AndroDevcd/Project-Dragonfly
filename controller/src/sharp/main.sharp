mod main;

import (
    std.io.*,
    platform,
    common.*,
    ui.support
)

tman : thread_manager;

def main(args: string[])
{
   load_library("bin/dragonfly");
   constants.NETWORK_STATE = constants.SERVER;
   tman = new thread_manager(thread.current());
   tman.start_threads();
   
   common.gpio#setup();
   setup_conn_tracker();

   coroutine.builder()
     .with_host(tman.io)
     .schedule(3000)
        = { ->
         println("d");
         network.handshake();
         disconnected = false;
      };
      
   coroutine.builder()
     .with_host(tman.io)
    .schedule(constants.INITIAL_START_DELAY)
      = { ->
         println("c");
         while(true) {
            if(!disconnected) {
               network.change_mode(constants.strings.FLIGHT_MODE_NORM);
            }

            delay(constants.DEVICE_UPDATE_INTERVAL);
         }
         // TODO: add controller state checks here
      };

   window.start_ui();
}

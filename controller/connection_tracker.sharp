mod main;

import std.io;
import std.io.coroutines;
import std.io.fiber;
import common.network;
import common;
import common.gpio;

LOCK := new _object_();
signal_strength := constants.SIGNAL_MIN;
disconnected := true;
conn_upd_count := 0;

def setup_conn_tracker() {
    pin_mode(constants.DEVICE_CONNECTING_PIN, constants.OUTPUT);
    write_pin(constants.DEVICE_CONNECTING_PIN, constants.LOW);
  
    coroutine.builder()
       = { ->
         for( ;; ) {
	        write_pin(constants.DEVICE_CONNECTING_PIN, constants.HIGH);

            if(disconnected) {
		       delay(constants.TWO_HUNDRED);
	           write_pin(constants.DEVICE_CONNECTING_PIN, constants.LOW);
	        }

	        delay(constants.ONE_SECOND); // run every second
	     }
     };
     
     
    coroutine.builder()
     .long_term()
     .schedule(2750) // run after 3 seconds
       = { ->
           for( ;; ) {
              delay(constants.TWO_FIFTY); // run 4 times a second

		      if(disconnected) continue;
		      signal_strength = network.get_signal_strength();

		      if(signal_strength == constants.SIGNAL_MIN) {
		         if(conn_upd_count > 0)
		            conn_upd_count--;
		         else {
		   	     disconnected = true;
		            network.handshake(); // reconnect to device
		            disconnected = false;
		            conn_upd_count = constants.SIGNAL_UPD_THRESHOLD;
		         }
		      } else
		         conn_upd_count = 0;
		   }
     };
}


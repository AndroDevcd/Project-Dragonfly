mod common.network.remote;

import common.network.core;
import common.network.data.*;
import std.io;
import common;

class command_request_impl base request : command_request
{

    def listen(): command_response {
        response := new request_data();

        retry:
        rw_inf(response, READ, -1);

        value := response.at(constants.strings.CMD);
        if(value != null) {
            return new command_response(value, response);
        } else {
            response.clear();
            goto retry;
        }

        return null; // for the compiler
    }

    def send_command(req: request_data, ack: var, timeout: var): var {
        response := new request_data();

        if(timeout)
        {
            if(write(req)) {
                return 1;
            }

            if(ack) {
                if(read(response)) {
                    return 1;
                }

                value := response.at(constants.strings.RESPONSE);
                if(!(value != null && value == constants.strings.YES)) {
                    return 1;
                }
            }
        } else {
             retry:
             rw_inf(req, WRITE, constants.RW_LIMIT);

             if(ack) {
                 if(rw_inf(response, READ, constants.RW_LIMIT)) {
                     goto retry;
                 }

                 value := response.at(constants.strings.RESPONSE);
                 if(!(value != null && value == constants.strings.YES)) {
                     response.clear();
                     goto retry;
                 }
             }
        }

        return 0;
    }
}

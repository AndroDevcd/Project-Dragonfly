mod common.network;

import ( common.network.data.* );

class network {
    private static INSTANCE : network;
        get {
            if(INSTANCE == null) {
                INSTANCE = new network();
                common.network.remote#initialize(INSTANCE);
            }
            
            return INSTANCE;
        }

    public handshake_req : handshake_request;
    public command_req : command_request;
    public flight_mode_change_req : flight_mode_change_request;
    public acknowledge_req : acknowledge_request;
    public signal_strength_req : signal_strength_request;
    public network_scan_req : network_scan_request;
    public flight_data_req : flight_data_request;
    public jam_req : jam_request;

    static def handshake() {
        INSTANCE.handshake_req.handshake();
    }

    static def listen(): command_response? {
       return INSTANCE.command_req.listen();
    }

    static def change_mode(mode: string): int {
       lock(INSTANCE) {
          return INSTANCE.flight_mode_change_req.change_mode(mode);
       }
    }

    static def jam(channel: var) {
       lock(INSTANCE) {
          INSTANCE.jam_req.jam(channel);
       }
    }
    
    static def request_jam(channel: var): int {
       lock(INSTANCE) {
          return INSTANCE.jam_req.post(channel);
       }
    }
    
    static def get_signal_strength() : int {
        return INSTANCE.signal_strength_req.get_strength();
    }

    static def scan_network() : var[] {
        lock(INSTANCE) {
           return INSTANCE.network_scan_req.scan_network();
        }
    }
    
    static def get_flight_data() : flight_data_response? {
        lock(INSTANCE) {
           return INSTANCE.flight_data_req._get();
        }
    }
    
    static def post_flight_data(data: flight_data_response) {
        lock(INSTANCE) {
           INSTANCE.flight_data_req.post(data);
        }
    }

    static def send_acknowledge() {
        lock(INSTANCE) {
           INSTANCE.acknowledge_req.send();
        }
    }
}

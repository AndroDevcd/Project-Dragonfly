mod common.network.core;

import std.io;
import common.network.driver;
import common;

class request
{
    public static device : nrf24;
    public static const READ := 0;
    public static const WRITE := 1;

    init {
        if(device == null) {
            device = new nrf24();
            device.dump();
        }
    }
    
    static def jam_network(channel: var)
        := device.jam_network(channel);

    static def get_network_quality()
        := device.get_network_quality();

    static def get_signal_strength()
        := device.get_signal_strength();

    private static def write(rdata: request_data): var {
        return device.send(rdata.to_string());
    }
    
    private static def process_result(raw: string, rdata: request_data) {
        i := 0;
        for(;;) {
            key := new string();
            value := new string();

            startPos := i;
            while(raw[i] != '=') { i++; }
            key = raw.substring(startPos, i);

            startPos = ++i;
            while(raw[i] != ',') {
                i++;
                if(!(i < raw.size()))
                    break;
            }

            value = raw.substring(startPos, i);
            //println("read data: $key = $value");
            rdata.add_item(key, value);
            i++;

            if((i + 1) >= raw.size()) {
                break;
            }
        }
    }

    private static def read(rdata: request_data): var {
        raw := new string();
        result := device.read(raw);

        //println("raw data: $raw result $result");
        if(result == 0)
        {
            process_result(raw, rdata);
            return 0;
        } else return result;
    }

    
    static def listen(rdata: request_data) {
        raw := new string();
        device.listen(raw);

        process_result(raw, rdata);
    }

    static def rw_inf(rdata: request_data, rw: var, count: var) : var {
	    lock(device) {
            if(rw == READ) {
                for(;;) {
                    if(read(rdata) != 0) {
                        thread.yield();
                        thread.sleep(1);
                        if(count != constants.INFINITE && count-- < 0) {
                            return 1;
                        }
                        continue;
                    }
                    
                    break;
                }
            } else {
                for(;;) {
                    if(write(rdata) != 0) {
                        thread.yield();
                        thread.sleep(1);
                        if(count != constants.INFINITE && count-- < 0) {
                            return 1;
                        }
                        continue;
                    }
                    
                    break;
                }
            }
            
            return 0;
        }
    }
}

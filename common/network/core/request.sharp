mod common.network.core;

import std.io;
import common.network.driver;

class request
{
    private static device : nrf24;
    public static READ := 0;
    public static WRITE := 1;

    init {
        if(device == null) {
            device = new nrf24();
            device.dump();
        }
    }

    static def write(rdata: request_data): var {
        return device.send(rdata.to_string());
    }

    static def read(rdata: request_data): var {
        raw := new string();
        result := device.read(raw);

        println("raw data: $raw result $result");
        if(result == 0)
        {
            for(i := 0; i < raw.size(); i++) {
                key := new string();
                value := new string();

                startPos := i, endPos;
                while(raw[i++] != '=') { endPos = i; }
                key = raw.substring(startPos, endPos);

                startPos = i;
                while(raw[i++] != ',') {
                    if((i + 1) > raw.size()) {
                        endPos=i;
                        break;
                    } else endPos = i-1;
                }
                value = raw.substring(startPos, endPos);

                println("read data: $key = $value");
                rdata.add_item(key, value);
            }
            
            println("success parsing");
            return 0;
        } else return result;
    }

    static def rw_inf(rdata: request_data, rw: var, count: var) : var {
        if(rw == READ) {
            for(;;) {
                if(read(rdata) != 0) {
                    thread.sleep(1);
                    if(count != -1 && count-- > 0) {
                        return 1;
                    }
                    continue;
                }
                
                return 0;
            }
        } else {
            for(;;) {
                if(write(rdata) != 0) {
                    thread.sleep(1);
                    if(count != -1 && count-- > 0) {
                        return 1;
                    }
                    continue;
                }
                
                return 0;
            }
        }
    }
}

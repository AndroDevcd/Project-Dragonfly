mod common.network.core;

class request_data {
    items := new list<request_item>();
    indexing_func : (request_item, request_item)(bool) =
        { t1, t2 ->
            return t1.key == t2.key;
        };
    request_string : string?;
       get {
          if(request_string == null) {
            sb := new string_builder();
            println("items $items");
            for(i := 0; i < items.size(); i++) {
                sb += items[i].key;
                sb += "=" + items[i].value;

                if((i + 1) < items.size()) {
                    sb += ",";
                }
            }

            request_string = sb.to_string();
          }

          return request_string;
       }

    def add_item(key: string, value: string) : request_data {
        item := new request_item(key, value);
        index := items.indexof(item, indexing_func);

        if(index == -1)
            items.add(item);
        else
            items.at(index).value = value;

        request_string = null;
        return self;
    }

    override def to_string() : string? {
        return request_string;
    }

    def at(key: string): string? {
        item := new request_item(key, null);
        index := items.indexof(item, indexing_func);

        if(index == -1)
            return null;
        else
            return items.at(index).value;
    }

    def clear() {
        items.clear();
        request_string = null;
    }

    class request_item
    {
        key: string;
        value: string?;

        request_item(k: string, v: string?)
        {
            key = k;
            value = v;
        }
    }
}

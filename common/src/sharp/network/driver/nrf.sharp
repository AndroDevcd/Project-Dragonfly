mod common.network.driver;

import ( common );

class nrf24 {

    is_setup := false;
    has_power := false;
    transmission_level := constants.RF24_PA_MIN;
    transmission_rate := constants.RF24_1MBPS;

    nrf24()
    {
        is_setup = true;
        has_power = true;
        setup(transmission_level, transmission_rate,
            constants.DELAY_500US, 5, constants.NETWORK_STATE);
    }

	def set_rf_lvl(level: var) {
	    lock(self) {
		check_state();
		transmission_level = level;
		set_transmission_lvl(level);
	    }
	}

        def jam_network(channel: var) {
	  lock(self) {
	     check_state();
	     jam(channel);
	  }
	}

	def set_data_rate(level: var) {
	    lock(self) {
		check_state();
		transmission_rate = level;
		set_transmission_rate(level);
	    }
	}

	def dump() {
	    lock(self) {
		check_state();
		dump_details();
	    }
	}

	def update_retry_count(delay: var, count: var) {
	    lock(self) {
		check_state();
		set_retry_count(delay, count);
	    }
	}

	def shut_down() {
	    lock(self) {
		has_power = false;
		power_down();
	    }
	}

    def get_network_quality() : var[] {
       lock(self) {
    	   check_state();
    	   return common.network.driver#get_network_quality();
       }
    }

	def get_signal_strength(): int {
	    lock(self) {
		check_state();
		return common.network.driver#get_signal_strength();
	    }
	}

	def read(response: string): int {
	    check_state();

	    response = common.network.driver#read();
	    return get_last_error();
	}
	
	def listen(response: string) {
	    lock(self) {
		check_state();
		response = common.network.driver#listen();
	    }
	}

	def send(response: string): int {
	    check_state();

	    common.network.driver#send(response.data);
	    return get_last_error();
	}

	def check_state() {
	    if(!is_setup)
	        throw new ill_state_except("device is not setup");
	    if(!has_power)
	        throw new ill_state_except("device is shutown");
	}
}

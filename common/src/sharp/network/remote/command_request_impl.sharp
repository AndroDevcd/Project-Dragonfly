mod common.network.remote;

import (
    common.network.core,
    common.network.data.*,
    std.io,
    common
);

class command_request_impl base request : command_request
{

    override def listen(): command_response? {
        response := new request_data();

        for(;;) {
            listen(response);

            value := response.at(constants.strings.CMD);
            if(value != null) {
                return new command_response(value, response);
            } else {
                response.clear();
            }
        }

        return null; // for the compiler
    }

    override def send_command(req: request_data, ack: var, timeout: var): int {
        response := new request_data();

        if(timeout)
        {
            if(rw_inf(req, WRITE, constants.RW_LIMIT).to_bool()) {
                return 1;
            }

            if(ack) {
                if(rw_inf(response, READ, constants.RW_LIMIT).to_bool()) {
                    return 1;
                }

                value := response.at(constants.strings.RESPONSE);
                if(!(value != null && value == constants.strings.YES)) {
                    return 1;
                }
            }
        } else {
             for(;;) {
                 rw_inf(req, WRITE, constants.RW_LIMIT);

                 if(ack) {
                     if(rw_inf(response, READ, constants.RW_LIMIT).to_bool()) {
                         continue;
                     }

                     value := response.at(constants.strings.RESPONSE);
                     if(!(value != null && value == constants.strings.YES)) {
                         response.clear();
                         continue;
                     }

                     break;
                 } else break;
             }
        }

        return 0;
    }
}

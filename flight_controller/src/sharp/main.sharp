mod main;

import (
    std.*,
    platform,
    common.network,
    common,
    common.network.data.response,
    common.gpio
);

def main(args: string[])
{
   load_library("/bin/dragonfly");
   constants.NETWORK_STATE = constants.CLIENT;

   common.gpio#setup();
   network.setup();
   requests := 0;
   past := time.mills_time();
   //setup_hc_sr04();
   for(;;) {
      response := network.listen();
      println("got ${ response!!.command }");
      requests++;
      when(response!!.command) {
         constants.strings.CHANGE_MODE -> {
            network.send_acknowledge();
         }
         constants.strings.JAM -> {
            network.send_acknowledge();
            println("jamming...\n");
            network.jam(int.parse(response!!.data.at(constants.strings.CHANNEL)!!).value);
         }
         constants.strings.FLIGHT_DATA -> {
            network.post_flight_data(new flight_data_response(requests % 4, requests % 999, requests % 999));
         }
         constants.strings.HANDSHAKE -> {
            network.send_acknowledge();
         }
      }

      if((time.mills_time() - past) > 1000) {
        past = time.mills_time();
        println("requests: $requests");
        requests = 0;
      }
   }
}
